/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BotblockMarket {
  export type PlanStruct = {
    planID: PromiseOrValue<BigNumberish>;
    contentCreator: PromiseOrValue<string>;
    paymentTokenAddress: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    expirationBlock: PromiseOrValue<BigNumberish>;
    uri: PromiseOrValue<string>;
  };

  export type PlanStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    planID: BigNumber;
    contentCreator: string;
    paymentTokenAddress: string;
    price: BigNumber;
    expirationBlock: BigNumber;
    uri: string;
  };

  export type OrderStruct = {
    buyer: PromiseOrValue<string>;
    plan: BotblockMarket.PlanStruct;
    status: PromiseOrValue<BigNumberish>;
    orderId: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    BotblockMarket.PlanStructOutput,
    number,
    BigNumber
  ] & {
    buyer: string;
    plan: BotblockMarket.PlanStructOutput;
    status: number;
    orderId: BigNumber;
  };
}

export interface BotblockMarketInterface extends utils.Interface {
  functions: {
    "createPlan(address,uint256,uint256,string)": FunctionFragment;
    "evadeActiveOrders()": FunctionFragment;
    "evadeOrder(uint256)": FunctionFragment;
    "getAllOrders()": FunctionFragment;
    "getAllPlans()": FunctionFragment;
    "neverminedNft721()": FunctionFragment;
    "orderCount()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeOrder(uint256,uint256)": FunctionFragment;
    "planCount()": FunctionFragment;
    "plans(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPlan"
      | "evadeActiveOrders"
      | "evadeOrder"
      | "getAllOrders"
      | "getAllPlans"
      | "neverminedNft721"
      | "orderCount"
      | "orders"
      | "owner"
      | "placeOrder"
      | "planCount"
      | "plans"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPlan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evadeActiveOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evadeOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "neverminedNft721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "planCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plans",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evadeActiveOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evadeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "neverminedNft721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "planCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NVMNFTCreated(address)": EventFragment;
    "OrderEvaded(uint256,address,uint256)": EventFragment;
    "OrderPlaced(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlanCreated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NVMNFTCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderEvaded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlanCreated"): EventFragment;
}

export interface NVMNFTCreatedEventObject {
  nftAddress: string;
}
export type NVMNFTCreatedEvent = TypedEvent<[string], NVMNFTCreatedEventObject>;

export type NVMNFTCreatedEventFilter = TypedEventFilter<NVMNFTCreatedEvent>;

export interface OrderEvadedEventObject {
  orderId: BigNumber;
  buyer: string;
  tokenId: BigNumber;
}
export type OrderEvadedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OrderEvadedEventObject
>;

export type OrderEvadedEventFilter = TypedEventFilter<OrderEvadedEvent>;

export interface OrderPlacedEventObject {
  orderId: BigNumber;
  buyer: string;
}
export type OrderPlacedEvent = TypedEvent<
  [BigNumber, string],
  OrderPlacedEventObject
>;

export type OrderPlacedEventFilter = TypedEventFilter<OrderPlacedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlanCreatedEventObject {
  planID: BigNumber;
  contentCreator: string;
}
export type PlanCreatedEvent = TypedEvent<
  [BigNumber, string],
  PlanCreatedEventObject
>;

export type PlanCreatedEventFilter = TypedEventFilter<PlanCreatedEvent>;

export interface BotblockMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BotblockMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPlan(
      paymentTokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      expirationBlock: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    evadeActiveOrders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    evadeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllOrders(
      overrides?: CallOverrides
    ): Promise<
      [BotblockMarket.OrderStructOutput[]] & {
        allOrders: BotblockMarket.OrderStructOutput[];
      }
    >;

    getAllPlans(
      overrides?: CallOverrides
    ): Promise<
      [BotblockMarket.PlanStructOutput[]] & {
        allPlans: BotblockMarket.PlanStructOutput[];
      }
    >;

    neverminedNft721(overrides?: CallOverrides): Promise<[string]>;

    orderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BotblockMarket.PlanStructOutput, number, BigNumber] & {
        buyer: string;
        plan: BotblockMarket.PlanStructOutput;
        status: number;
        orderId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeOrder(
      planID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    planCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, string] & {
        planID: BigNumber;
        contentCreator: string;
        paymentTokenAddress: string;
        price: BigNumber;
        expirationBlock: BigNumber;
        uri: string;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPlan(
    paymentTokenAddress: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    expirationBlock: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  evadeActiveOrders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  evadeOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllOrders(
    overrides?: CallOverrides
  ): Promise<BotblockMarket.OrderStructOutput[]>;

  getAllPlans(
    overrides?: CallOverrides
  ): Promise<BotblockMarket.PlanStructOutput[]>;

  neverminedNft721(overrides?: CallOverrides): Promise<string>;

  orderCount(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BotblockMarket.PlanStructOutput, number, BigNumber] & {
      buyer: string;
      plan: BotblockMarket.PlanStructOutput;
      status: number;
      orderId: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  placeOrder(
    planID: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  planCount(overrides?: CallOverrides): Promise<BigNumber>;

  plans(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber, string] & {
      planID: BigNumber;
      contentCreator: string;
      paymentTokenAddress: string;
      price: BigNumber;
      expirationBlock: BigNumber;
      uri: string;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPlan(
      paymentTokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      expirationBlock: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    evadeActiveOrders(overrides?: CallOverrides): Promise<void>;

    evadeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOrders(
      overrides?: CallOverrides
    ): Promise<BotblockMarket.OrderStructOutput[]>;

    getAllPlans(
      overrides?: CallOverrides
    ): Promise<BotblockMarket.PlanStructOutput[]>;

    neverminedNft721(overrides?: CallOverrides): Promise<string>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BotblockMarket.PlanStructOutput, number, BigNumber] & {
        buyer: string;
        plan: BotblockMarket.PlanStructOutput;
        status: number;
        orderId: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    placeOrder(
      planID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    planCount(overrides?: CallOverrides): Promise<BigNumber>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, string] & {
        planID: BigNumber;
        contentCreator: string;
        paymentTokenAddress: string;
        price: BigNumber;
        expirationBlock: BigNumber;
        uri: string;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NVMNFTCreated(address)"(nftAddress?: null): NVMNFTCreatedEventFilter;
    NVMNFTCreated(nftAddress?: null): NVMNFTCreatedEventFilter;

    "OrderEvaded(uint256,address,uint256)"(
      orderId?: null,
      buyer?: null,
      tokenId?: null
    ): OrderEvadedEventFilter;
    OrderEvaded(
      orderId?: null,
      buyer?: null,
      tokenId?: null
    ): OrderEvadedEventFilter;

    "OrderPlaced(uint256,address)"(
      orderId?: null,
      buyer?: null
    ): OrderPlacedEventFilter;
    OrderPlaced(orderId?: null, buyer?: null): OrderPlacedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlanCreated(uint256,address)"(
      planID?: null,
      contentCreator?: null
    ): PlanCreatedEventFilter;
    PlanCreated(planID?: null, contentCreator?: null): PlanCreatedEventFilter;
  };

  estimateGas: {
    createPlan(
      paymentTokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      expirationBlock: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    evadeActiveOrders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    evadeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPlans(overrides?: CallOverrides): Promise<BigNumber>;

    neverminedNft721(overrides?: CallOverrides): Promise<BigNumber>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      planID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    planCount(overrides?: CallOverrides): Promise<BigNumber>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPlan(
      paymentTokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      expirationBlock: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    evadeActiveOrders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    evadeOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    neverminedNft721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrder(
      planID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    planCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plans(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
